{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Accessing GaiaArchive with TAP+"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this tutorial, we go through how to access, examine and use Gaia TAP+ service using **gapipes**.\n",
    "For databases as large as Gaia (and many other large astronomical surveys for that matter),\n",
    "downloading everything as a set of files is no longer practical.\n",
    "The Table Access Protocol (TAP) was designed for the purpse of communicating general tabular data by the [IVOA](http://www.ivoa.net/).\n",
    "For [Gaia](http://gea.esac.esa.int/archive/) and other ESA Services, the ESDC extended this protocol, called TAP+.\n",
    "The extension includes user table space, sharing tables among groups, and listing jobs.\n",
    "\n",
    "\n",
    "## Why another Gaia TAP client?\n",
    "\n",
    "There is already a TAP python client in the popular [astroquery](https://astroquery.readthedocs.io/en/latest/). So why another one?\n",
    "\n",
    "The current implementation in astroquery is excessively verbose, has clunky api design, does not report an informative error message and does not nicely cover all the 'quarks' of GaiaArchive. This module is written more or less out of frustration.\n",
    "If astroquery eventually change to implementation that uses [pyvo](http://pyvo.readthedocs.io), which has a much well-defined code structure and cleaner interface, this module can retire."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting started\n",
    "\n",
    "In **gapipes**, there are two core classes that interfaces these services:\n",
    "one for plain TAP (`gapipes.TAP`) and one for GaiaTAP+ (`gapipes.GaiaTapPlus`).\n",
    "While they are written so that you can point at any available service,\n",
    "a default instance `gapipes.gaia` is already defined pointing at [the official Gaia Archive](http://gea.esac.esa.int/archive/).\n",
    "\n",
    "**NOTE** Following [Yagni](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it) principle, **gapipes** does not implement _all_ [capabilities of Gaia TAP+](http://gea.esac.esa.int/archive-help/index.html) such as sharing tables with other users. If you need any missing feature of Gaia TAP+ in **gapipes**, feel free to open [an issue or a pull request](https://github.com/smoh/gapipes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaiaTapPlus(\"gea.esac.esa.int\", \"/tap-server/tap\", \"https\", 443)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import gapipes as gp\n",
    "\n",
    "gp.gaia"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inspecting table meta data\n",
    "\n",
    "The list of tables and columns available can be inspected using `tables` and `columns` attribute, which are pandas DataFrames."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total number of tables: 80\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schema</th>\n",
       "      <th>table_name</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos</td>\n",
       "      <td>hipparcos original catalogue (J1991.25)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos_newreduction</td>\n",
       "      <td>Hipparcos New Reduction: The Astrometric Catal...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>public</td>\n",
       "      <td>hubble_sc</td>\n",
       "      <td>Hubble Source Catalogue</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>public</td>\n",
       "      <td>igsl_source</td>\n",
       "      <td>null</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>public</td>\n",
       "      <td>igsl_source_catalog_ids</td>\n",
       "      <td>SourceId in original  catalogues</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   schema               table_name  \\\n",
       "0  public                hipparcos   \n",
       "1  public   hipparcos_newreduction   \n",
       "2  public                hubble_sc   \n",
       "3  public              igsl_source   \n",
       "4  public  igsl_source_catalog_ids   \n",
       "\n",
       "                                         description  \n",
       "0            hipparcos original catalogue (J1991.25)  \n",
       "1  Hipparcos New Reduction: The Astrometric Catal...  \n",
       "2                            Hubble Source Catalogue  \n",
       "3                                               null  \n",
       "4                   SourceId in original  catalogues  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('total number of tables:', len(gp.gaia.tables))\n",
    "gp.gaia.tables.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schema</th>\n",
       "      <th>table_name</th>\n",
       "      <th>column_name</th>\n",
       "      <th>unit</th>\n",
       "      <th>dtype</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos</td>\n",
       "      <td>astroref</td>\n",
       "      <td></td>\n",
       "      <td>VARCHAR</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos</td>\n",
       "      <td>bd</td>\n",
       "      <td></td>\n",
       "      <td>VARCHAR</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos</td>\n",
       "      <td>btmag</td>\n",
       "      <td></td>\n",
       "      <td>REAL</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos</td>\n",
       "      <td>b_v</td>\n",
       "      <td></td>\n",
       "      <td>REAL</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos</td>\n",
       "      <td>ccdm</td>\n",
       "      <td></td>\n",
       "      <td>VARCHAR</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   schema table_name column_name unit    dtype description\n",
       "0  public  hipparcos    astroref       VARCHAR            \n",
       "1  public  hipparcos          bd       VARCHAR            \n",
       "2  public  hipparcos       btmag          REAL            \n",
       "3  public  hipparcos         b_v          REAL            \n",
       "4  public  hipparcos        ccdm       VARCHAR            "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gp.gaia.columns.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So you can easily filter these tables using pandas methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schema</th>\n",
       "      <th>table_name</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos</td>\n",
       "      <td>hipparcos original catalogue (J1991.25)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos_newreduction</td>\n",
       "      <td>Hipparcos New Reduction: The Astrometric Catal...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>public</td>\n",
       "      <td>hubble_sc</td>\n",
       "      <td>Hubble Source Catalogue</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>public</td>\n",
       "      <td>igsl_source</td>\n",
       "      <td>null</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>public</td>\n",
       "      <td>igsl_source_catalog_ids</td>\n",
       "      <td>SourceId in original  catalogues</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>public</td>\n",
       "      <td>tycho2</td>\n",
       "      <td>The Tycho-2 Catalogue is an astrometric refere...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>public</td>\n",
       "      <td>dual</td>\n",
       "      <td>auxiliary table to be used as dummy from</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   schema               table_name  \\\n",
       "0  public                hipparcos   \n",
       "1  public   hipparcos_newreduction   \n",
       "2  public                hubble_sc   \n",
       "3  public              igsl_source   \n",
       "4  public  igsl_source_catalog_ids   \n",
       "5  public                   tycho2   \n",
       "6  public                     dual   \n",
       "\n",
       "                                         description  \n",
       "0            hipparcos original catalogue (J1991.25)  \n",
       "1  Hipparcos New Reduction: The Astrometric Catal...  \n",
       "2                            Hubble Source Catalogue  \n",
       "3                                               null  \n",
       "4                   SourceId in original  catalogues  \n",
       "5  The Tycho-2 Catalogue is an astrometric refere...  \n",
       "6           auxiliary table to be used as dummy from  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gp.gaia.tables.query('schema == \"public\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schema</th>\n",
       "      <th>table_name</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>gaiadr1</td>\n",
       "      <td>gaia_source</td>\n",
       "      <td>This table has an entry for every Gaia observe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>gaia_source</td>\n",
       "      <td>This table has an entry for every Gaia observe...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     schema   table_name                                        description\n",
       "37  gaiadr1  gaia_source  This table has an entry for every Gaia observe...\n",
       "78  gaiadr2  gaia_source  This table has an entry for every Gaia observe..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gp.gaia.tables.query('table_name == \"gaia_source\"')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Have a look at one particular table in detail."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schema</th>\n",
       "      <th>table_name</th>\n",
       "      <th>column_name</th>\n",
       "      <th>unit</th>\n",
       "      <th>dtype</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1531</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>gaia_source</td>\n",
       "      <td>solution_id</td>\n",
       "      <td></td>\n",
       "      <td>BIGINT</td>\n",
       "      <td>Solution Identifier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1532</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>gaia_source</td>\n",
       "      <td>designation</td>\n",
       "      <td></td>\n",
       "      <td>VARCHAR</td>\n",
       "      <td>Unique source designation (unique across all D...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1533</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>gaia_source</td>\n",
       "      <td>source_id</td>\n",
       "      <td></td>\n",
       "      <td>BIGINT</td>\n",
       "      <td>Unique source identifier (unique within a part...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1534</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>gaia_source</td>\n",
       "      <td>random_index</td>\n",
       "      <td></td>\n",
       "      <td>BIGINT</td>\n",
       "      <td>Random index used to select subsets</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1535</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>gaia_source</td>\n",
       "      <td>ref_epoch</td>\n",
       "      <td>yr</td>\n",
       "      <td>DOUBLE</td>\n",
       "      <td>Reference epoch</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       schema   table_name   column_name unit    dtype  \\\n",
       "1531  gaiadr2  gaia_source   solution_id        BIGINT   \n",
       "1532  gaiadr2  gaia_source   designation       VARCHAR   \n",
       "1533  gaiadr2  gaia_source     source_id        BIGINT   \n",
       "1534  gaiadr2  gaia_source  random_index        BIGINT   \n",
       "1535  gaiadr2  gaia_source     ref_epoch   yr   DOUBLE   \n",
       "\n",
       "                                            description  \n",
       "1531                                Solution Identifier  \n",
       "1532  Unique source designation (unique across all D...  \n",
       "1533  Unique source identifier (unique within a part...  \n",
       "1534                Random index used to select subsets  \n",
       "1535                                    Reference epoch  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gp.gaia.columns.query('(table_name == \"gaia_source\") & schema == \"gaiadr2\"').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Getting information about specific table(s)\n",
    "\n",
    "You can also get information about specific tables with GaiaTAP+."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "tables, columns = gp.gaia.get_table_info(only_tables=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schema</th>\n",
       "      <th>table_name</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos</td>\n",
       "      <td>hipparcos original catalogue (J1991.25)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>public</td>\n",
       "      <td>hipparcos_newreduction</td>\n",
       "      <td>Hipparcos New Reduction: The Astrometric Catal...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>public</td>\n",
       "      <td>hubble_sc</td>\n",
       "      <td>Hubble Source Catalogue</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>public</td>\n",
       "      <td>igsl_source</td>\n",
       "      <td>null</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>public</td>\n",
       "      <td>igsl_source_catalog_ids</td>\n",
       "      <td>SourceId in original  catalogues</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>vari_short_timescale</td>\n",
       "      <td>This table describes the short-timescale sourc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>vari_time_series_statistics</td>\n",
       "      <td>Statistical parameters of time series, using o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>panstarrs1_original_valid</td>\n",
       "      <td>The Panoramic Survey Telescope and Rapid Respo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>gaia_source</td>\n",
       "      <td>This table has an entry for every Gaia observe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>gaiadr2</td>\n",
       "      <td>ruwe</td>\n",
       "      <td>This table contains the Renormalised Unit Weig...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     schema                   table_name  \\\n",
       "0    public                    hipparcos   \n",
       "1    public       hipparcos_newreduction   \n",
       "2    public                    hubble_sc   \n",
       "3    public                  igsl_source   \n",
       "4    public      igsl_source_catalog_ids   \n",
       "..      ...                          ...   \n",
       "75  gaiadr2         vari_short_timescale   \n",
       "76  gaiadr2  vari_time_series_statistics   \n",
       "77  gaiadr2    panstarrs1_original_valid   \n",
       "78  gaiadr2                  gaia_source   \n",
       "79  gaiadr2                         ruwe   \n",
       "\n",
       "                                          description  \n",
       "0             hipparcos original catalogue (J1991.25)  \n",
       "1   Hipparcos New Reduction: The Astrometric Catal...  \n",
       "2                             Hubble Source Catalogue  \n",
       "3                                                null  \n",
       "4                    SourceId in original  catalogues  \n",
       "..                                                ...  \n",
       "75  This table describes the short-timescale sourc...  \n",
       "76  Statistical parameters of time series, using o...  \n",
       "77  The Panoramic Survey Telescope and Rapid Respo...  \n",
       "78  This table has an entry for every Gaia observe...  \n",
       "79  This table contains the Renormalised Unit Weig...  \n",
       "\n",
       "[80 rows x 3 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fb817c87c50>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# count number of columns for each schema\n",
    "columns.groupby('schema')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Query the Gaia database\n",
    "\n",
    "There are two kinds of queries supported: synchronous and asynchonous.\n",
    "\n",
    "Let's start with synchonous queries.\n",
    "\n",
    "### Synchronous queries\n",
    "\n",
    "Use `.query` to send an ADQL query to the database. The default behaviour is to request output in csv format and read resulting table as pandas.DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>solution_id</th>\n",
       "      <th>designation</th>\n",
       "      <th>source_id</th>\n",
       "      <th>random_index</th>\n",
       "      <th>...</th>\n",
       "      <th>lum_percentile_lower</th>\n",
       "      <th>lum_percentile_upper</th>\n",
       "      <th>datalink_url</th>\n",
       "      <th>epoch_photometry_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>163572...</td>\n",
       "      <td>Gaia D...</td>\n",
       "      <td>387526...</td>\n",
       "      <td>459847817</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https:...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>163572...</td>\n",
       "      <td>Gaia D...</td>\n",
       "      <td>387502...</td>\n",
       "      <td>229923908</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https:...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>163572...</td>\n",
       "      <td>Gaia D...</td>\n",
       "      <td>387646...</td>\n",
       "      <td>114961954</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https:...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>163572...</td>\n",
       "      <td>Gaia D...</td>\n",
       "      <td>387506...</td>\n",
       "      <td>57480977</td>\n",
       "      <td>...</td>\n",
       "      <td>0.909308</td>\n",
       "      <td>1.484657</td>\n",
       "      <td>https:...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>163572...</td>\n",
       "      <td>Gaia D...</td>\n",
       "      <td>387649...</td>\n",
       "      <td>108811...</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https:...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 96 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   solution_id designation  source_id  random_index  ...  \\\n",
       "0  163572...    Gaia D...   387526...  459847817     ...   \n",
       "1  163572...    Gaia D...   387502...  229923908     ...   \n",
       "2  163572...    Gaia D...   387646...  114961954     ...   \n",
       "3  163572...    Gaia D...   387506...   57480977     ...   \n",
       "4  163572...    Gaia D...   387649...  108811...     ...   \n",
       "\n",
       "   lum_percentile_lower  lum_percentile_upper  datalink_url  \\\n",
       "0        NaN                   NaN             https:...      \n",
       "1        NaN                   NaN             https:...      \n",
       "2        NaN                   NaN             https:...      \n",
       "3   0.909308              1.484657             https:...      \n",
       "4        NaN                   NaN             https:...      \n",
       "\n",
       "   epoch_photometry_url  \n",
       "0        NaN             \n",
       "1        NaN             \n",
       "2        NaN             \n",
       "3        NaN             \n",
       "4        NaN             \n",
       "\n",
       "[5 rows x 96 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = gp.gaia.query('select top 10 * from gaiadr2.gaia_source', output_format='csv')\n",
    "print(type(r))\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_columns', 8, 'display.max_colwidth', 10)\n",
    "r.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wrong queries will raise exception with a useful message from the server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "HTTPError",
     "evalue": "Cannot parse query 'select top 5 * from foo.bar' for job '1550666502785O': 1 unresolved identifiers: bar [l.1 c.21 - l.1 c.28] !",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m~/projects/gapipes/gapipes/gaia/core.py\u001b[0m in \u001b[0;36mquery\u001b[0;34m(self, query, name, upload_resource, upload_table_name, output_format)\u001b[0m\n\u001b[1;32m    194\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 195\u001b[0;31m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_for_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    196\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mTap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse_result_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_format\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/miniconda3/envs/research/lib/python3.7/site-packages/requests/models.py\u001b[0m in \u001b[0;36mraise_for_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    938\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhttp_error_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 939\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhttp_error_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    940\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mHTTPError\u001b[0m: 500 Server Error: 500 for url: https://gea.esac.esa.int/tap-server/tap/sync",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-baaf9fa1f68b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgaia\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'select top 5 * from foo.bar'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/projects/gapipes/gapipes/gaia/core.py\u001b[0m in \u001b[0;36mquery\u001b[0;34m(self, query, name, upload_resource, upload_table_name, output_format)\u001b[0m\n\u001b[1;32m    197\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mHTTPError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m             \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparse_votable_error_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 199\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    200\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    201\u001b[0m     def query_async(self, query, name=None,\n",
      "\u001b[0;31mHTTPError\u001b[0m: Cannot parse query 'select top 5 * from foo.bar' for job '1550666502785O': 1 unresolved identifiers: bar [l.1 c.21 - l.1 c.28] !"
     ]
    }
   ],
   "source": [
    "r = gp.gaia.query('select top 5 * from foo.bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Asynchronous queries\n",
    "\n",
    "For a more complicated queries that takes longer than 30 seconds,\n",
    "use `.query_async`. The interface is the same except the return value is now a `Job` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Job(jobid='1550666562163O', phase='EXECUTING')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "select \n",
    "    count(*) as n, \n",
    "    round(phot_g_mean_mag, 1) as val\n",
    "from \n",
    "    gaiadr1.tgas_source \n",
    "group by val\n",
    "order by val\n",
    "\"\"\"\n",
    "j = gp.gaia.query_async(query, output_format='csv', name='histogram')\n",
    "j"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use `.get_result` to wait until the job is finished and download the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 29.2 ms, sys: 11.7 ms, total: 40.9 ms\n",
      "Wall time: 3.42 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "r = j.get_result()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "r.plot('val', 'n');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Inspect `Job` if needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "select \n",
      "    count(*) as n, \n",
      "    round(phot_g_mean_mag, 1) as val\n",
      "from \n",
      "    gaiadr1.tgas_source \n",
      "group by val\n",
      "order by val\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(j.query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://gea.esac.esa.int/tap-server/tap/async/1550666562163O\n",
      "https://gea.esac.esa.int/tap-server/tap/async/1550666562163O/results/result\n"
     ]
    }
   ],
   "source": [
    "print(j.url)\n",
    "print(j.result_url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using authenticated service\n",
    "\n",
    "There are some benefits to using Gaia TAP+ authenticated service (with an account).\n",
    "\n",
    "Log in and out of server using `gp.gaia.login` and `gp.gaia.logout`.\n",
    "\n",
    "**NOTE**:\n",
    "\n",
    "- Once you are logged in, the result of `get_table_info` method includes your user tables if any.\n",
    "- Once you are logged in, `list_jobs` method only lists jobs you launched."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "User:  soh\n",
      "Password:  ············\n"
     ]
    }
   ],
   "source": [
    "gp.gaia.login()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Managing user tables\n",
    "\n",
    "Once you login, you can upload your own tables to user space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Uploaded file (size: 0) into 'foobar123'\""
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from astropy.table import Table\n",
    "\n",
    "mytable = Table.from_pandas(pd.DataFrame(dict(a=[1,2,3], b=[4,5,6])))\n",
    "gp.gaia.upload_table(mytable, 'foobar123', table_description='test table to demonstrate upload')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check if the table is there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>foobar123_oid</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   foobar123_oid  a  b\n",
       "0              1  1  4\n",
       "1              2  2  5\n",
       "2              3  3  6"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gp.gaia.query('select * from user_soh.foobar123;')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's delete."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Table 'foobar123' removed.\""
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gp.gaia.delete_user_table('foobar123')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we try to query a deleted table, we should get an error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "HTTPError",
     "evalue": "Cannot parse query 'select * from user_soh.foobar123;' for job '1553653744533O': 1 unresolved identifiers: foobar123 [l.1 c.15 - l.1 c.33] !",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m~/projects/gapipes/gapipes/gaia/core.py\u001b[0m in \u001b[0;36mquery\u001b[0;34m(self, query, name, upload_resource, upload_table_name, output_format)\u001b[0m\n\u001b[1;32m    202\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 203\u001b[0;31m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_for_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    204\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mTap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse_result_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_format\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/miniconda3/envs/research/lib/python3.7/site-packages/requests/models.py\u001b[0m in \u001b[0;36mraise_for_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    938\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhttp_error_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 939\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhttp_error_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    940\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mHTTPError\u001b[0m: 500 Server Error: 500 for url: https://gea.esac.esa.int/tap-server/tap/sync",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-b26c452954ec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mgp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgaia\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'select * from user_soh.foobar123;'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/projects/gapipes/gapipes/gaia/core.py\u001b[0m in \u001b[0;36mquery\u001b[0;34m(self, query, name, upload_resource, upload_table_name, output_format)\u001b[0m\n\u001b[1;32m    205\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mHTTPError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    206\u001b[0m             \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparse_votable_error_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 207\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    208\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    209\u001b[0m     def query_async(self, query, name=None,\n",
      "\u001b[0;31mHTTPError\u001b[0m: Cannot parse query 'select * from user_soh.foobar123;' for job '1553653744533O': 1 unresolved identifiers: foobar123 [l.1 c.15 - l.1 c.33] !"
     ]
    }
   ],
   "source": [
    "gp.gaia.query('select * from user_soh.foobar123;')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
